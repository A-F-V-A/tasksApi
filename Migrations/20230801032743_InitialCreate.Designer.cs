// <auto-generated />
using System;
using CourseEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseEF.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20230801032743_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseEF.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb4ef"),
                            Difficulty = 20,
                            Name = "Actividades pendientes"
                        },
                        new
                        {
                            CategoryId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb402"),
                            Difficulty = 50,
                            Name = "Actividades personales"
                        });
                });

            modelBuilder.Entity("CourseEF.Models.Tasks", b =>
                {
                    b.Property<Guid>("TasksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TasksId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TasksId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb410"),
                            CategoryId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb4ef"),
                            CreationDate = new DateTime(2023, 7, 31, 22, 27, 43, 803, DateTimeKind.Local).AddTicks(6289),
                            Priority = 0,
                            Title = "Pago de servicios publicos"
                        },
                        new
                        {
                            TasksId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb411"),
                            CategoryId = new Guid("fe2de405-c38e-4c90-ac52-da0540dfb402"),
                            CreationDate = new DateTime(2023, 7, 31, 22, 27, 43, 803, DateTimeKind.Local).AddTicks(6304),
                            Priority = 2,
                            Title = "Terminar de ver pelicula en netflix"
                        });
                });

            modelBuilder.Entity("CourseEF.Models.Tasks", b =>
                {
                    b.HasOne("CourseEF.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CourseEF.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
